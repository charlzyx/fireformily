(self["webpackChunkfireformily"]=self["webpackChunkfireformily"]||[]).push([[755],{22231:function(e,n,o){"use strict";o.d(n,{m:function(){return t.m}});var t=o(9684);o(72255)},56146:function(e,n,o){"use strict";o.r(n);var t=o(67294),r=o(96089),a=o(83314),l=o(65659),d=t.memo((e=>{var n=e.demos,o=n["treenodes-demo"].component;return t.createElement(t.Fragment,null,t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"-treenodes---\u6811"},t.createElement(r.AnchorLink,{to:"#-treenodes---\u6811","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\ud83c\udf84 TreeNodes - \u6811"),t.createElement("ul",null,t.createElement("li",null,"\u6807\u51c6\u5316\u4e3a\u8ddf ",t.createElement("code",null,"Cascader")," \u4e00\u6837\u7684\u8282\u70b9\u7ed3\u6784  ",t.createElement("code",null,"{","title, key","}")," -> ",t.createElement("code",null,"{","label, value","}")),t.createElement("li",null,"\u8ffd\u52a0\u8ddf ",t.createElement("code",null,"Linkage")," \u4e00\u6837\u7684 ",t.createElement("code",null,"loadAll")," \u65b9\u6cd5")),t.createElement(l.Z,{code:"export type TreeNode = {\n  label?: string;\n  value?: React.Key;\n  isLeaf?: boolean;\n  children?: TreeNode[];\n  disabled?: boolean;\n  loading?: boolean;\n  __init?: boolean;\n};",lang:"ts"})),t.createElement(a.default,n["treenodes-demo"].previewerProps,t.createElement(o,null)),t.createElement("div",{className:"markdown"},t.createElement("h2",{id:"api"},t.createElement(r.AnchorLink,{to:"#api","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"API"),t.createElement(l.Z,{code:"export type TreeNodesProps = Omit<AntdTreeProps, 'loadData' | 'onDrop' | 'value' | 'onChange'> & BaseTreeProps;\n\ntype AntdTreeProps = React.ComponentProps<typeof Tree>;\n\ntype BaseTreeProps = {\n  loadData?: (options: TreeNode[]) => Promise<TreeNode[]>;\n  loadAll?: () => Promise<TreeNode[]>;\n  layout?: React.ComponentProps<typeof Space>;\n  value?: {\n    expanedKeys?: React.Key[];\n    selectedKeys?: React.Key[];\n    checkedKeys?: React.Key[];\n    halfCheckedKeys?: React.Key[];\n    children?: TreeNode[];\n  };\n  onAdd?: (\n    pos: NodePos,\n    child: NodeLike,\n    parent: NodeLike,\n    root: NodeLike,\n  ) => void | Promise<NodeLike>;\n  onCopy?: (\n    pos: NodePos,\n    node: NodeLike,\n    parent: NodeLike,\n    root: NodeLike,\n  ) => void | Promise<NodeLike>;\n  onRemove?: (\n    pos: NodePos,\n    node: NodeLike,\n    parent: NodeLike,\n    root: NodeLike,\n  ) => void | Promise<void>;\n  onMove?: (\n    before: NodePos,\n    after: NodePos,\n    root: NodeLike,\n  ) => void | Promise<void>;\n}",lang:"ts"}))))}));n["default"]=e=>{var n=t.useContext(r.context),o=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(d,{demos:o})}}}]);